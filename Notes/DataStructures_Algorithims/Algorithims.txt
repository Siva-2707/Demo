Algorithims:
 A procedure for solving a mathematical problem in a finite number of steps that frequently by recursive operations 
 
Types of Algorithims
====================

1)Brute Force Algorithim
	It is the simplest approach for a problem. A brute force algorithm is the first approach that comes to finding when we see a problem.
	
2)Recursive Algorithim
	A recursive algorithm is based on recursion. In this case, a problem is broken into several sub-parts and called the same function again and again.
	
3)Backtracking Algorithm
	The backtracking algorithm basically builds the solution by searching among all possible solutions. Using this algorithm, we keep on building the solution following criteria. Whenever a solution fails we trace back to the failure point and build on the next solution and continue this process till we find the solution or all possible solutions are looked after.
	
4)Searching Algorithm
	Searching algorithms are the ones that are used for searching elements or groups of elements from a particular data structure. They can be of different types based on their approach or the data structure in which the element should be found.

5)Sorting Algorithm
	Sorting is arranging a group of data in a particular manner according to the requirement. The algorithms which help in performing this function are called sorting algorithms. Generally sorting algorithms are used to sort groups of data in an increasing or decreasing manner.

6)Hashing Algorithm
	 Hashing algorithms work similarly to the searching algorithm. But they contain an index with a key ID. In hashing, a key is assigned to specific data.

7)Divide and Conquer Algorithm
	This algorithm breaks a problem into sub-problems, solves a single sub-problem and merges the solutions together to get the final solution. It consists of the following three steps:

	Divide
	Solve
	Combine
	
8)Greedy Algorithm
	In this type of algorithm the solution is built part by part. The solution of the next part is built based on the immediate benefit of the next part. The one solution giving the most benefit will be chosen as the solution for the next part.

9)Dynamic Programming Algorithm
	This algorithm uses the concept of using the already found solution to avoid repetitive calculation of the same part of the problem. It divides the problem into smaller overlapping subproblems and solves them.

10)Randomized Algorithm
	In the randomized algorithm we use a random number so it gives immediate benefit. The random number helps in deciding the expected outcome.
	
Designing an Algorithim
=======================
The problem that is to be solved by this algorithm i.e. clear problem definition.
The constraints of the problem must be considered while solving the problem.
The input to be taken to solve the problem.
The output to be expected when the problem is solved.
The solution to this problem, is within the given constraints.

Analysing the algorithim:
========================
1)Prior Analysis
	Checking the algorithim before implementing it. 
	Checking the effeciency of Algorithim depending upon the processor.
2)Posterior Analysis
	Checking the algorithim after implementation. 
	For observing correctness of algorithim, space required and time consumed etc,.

Algorithim Complexity:
======================
The complexity of the algorithim depends upon the Space required and the time taken to execute the program.

	#Calculating Space Complexity:
		Two part are there: Fixed part and Varible part.
		
		Fixed Part: This refers to the space that is definitely required by the algorithm. For example, input variables, output variables, program size, etc.
		
		Variable Part: This refers to the space that can be different based on the implementation of the algorithm. For example, temporary variables, dynamic memory allocation, recursion stack space, etc.
		
		Therefore Space complexity S(P) of any algorithm P is S(P) = C + SP(I), where C is the fixed part and S(I) is the variable part of the algorithm, which depends on instance characteristic I.
	
	#Calculating Time Complexity:
		Two parts are there: Constant time part and Variable time part.
		
		Constant time part: Any instruction that is executed just once comes in this part. For example, input, output, if-else, switch, etc.
		
		Variable Time Part: Any instruction that is executed more than once, say n times, comes in this part. For example, loops, recursion, 	etc.
		
		Therefore Time complexity T(P)      of any algorithm P is T(P) = C + TP(I), where C is the constant time part and TP(I) is the variable part of the algorithm, which depends on the instance characteristic I.

Algorithim Design Techniques:
============================
1)Implementation Method
	-Recursive or Iteration
		Recursive - Calling the fuction again and again till desired output is obtained.
		Iteration - Using loops to produce output.
	-Exact or Approximate
		Exact - When the desired output can be obtained by an Algorithim, it's called Exact Algorithim
		Approximate - When the exact expected output is not obtained, the avarage outcome of the subprogram are helping in getting the approximate output.
	-Serial or Parallel or Distributed 
		Serial - Step by step process.
		Parallel - Thread processing 
		Distributed - Thread processing in different machines.
2)Design Method
	-Greedy 
		In the greedy method, at each step, a decision is made to choose the local optimum, without thinking about the future consequences. 
	-Divide and conqure
	-Dynamic programming
	-Linear programming
	-Reduction(Transform and Conquer)
	-Backtracking
	-Branch and Bound
3)Design Approaches
	-TopDown
	-BottomUp
4)Other Classifications
	-Randomized Algorithms: Algorithms that make random choices for faster solutions are known as randomized algorithms. 
	Example: Randomized Quicksort Algorithm.
	-Classification by complexity: Algorithms that are classified on the basis of time taken to get a solution to any problem for input size. This analysis is known as time complexity analysis. 
	Example: Some algorithms take O(n), while some take exponential time.
	-Classification by Research Area: In CS each field has its own problems and needs efficient algorithms. 
	Example: Sorting Algorithm, Searching Algorithm, Machine Learning etc.
	-Branch and Bound Enumeration and Backtracking: These are mostly used in Artificial Intelligence.

Sorting Techniques:
*******************
	Bubble sort
	============
	Bubble Sort is the simplest sorting algorithm that works by repeatedly swapping the adjacent elements if they are in the wrong order. This algorithm is not suitable for large data sets as its average and worst-case time complexity is quite high.

	Selection Sort
	==============
	The selection sort algorithm sorts an array by repeatedly finding the minimum element (considering ascending order) from unsorted part and putting it at the beginning. The algorithm maintains two subarrays in a given array.
	The subarray which is already sorted. 
	Remaining subarray which is unsorted.
	In every iteration of selection sort, the minimum element (considering ascending order) from the unsorted subarray is picked and moved to the sorted subarray. 

	Insertion Sort
	==============
	Insertion sort is a simple sorting algorithm that works similar to the way you sort playing cards in your hands. The array is virtually split into a sorted and an unsorted part. Values from the unsorted part are picked and placed at the correct position in the sorted part.
	

Searching Techniques

	Linear Search
	Binary Search
	