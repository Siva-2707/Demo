CSS 

CSS Values and Units - https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/Values_and_units
CSS Colours - https://colours.neilorangepeel.com/ 
	rgb - red blue green
	rgba 
	hsl - hue shadeness lightness
	hsla

CSS Selectors
=============
Universal Selector
* {

}

Element Selector
h1 {

}

Class Selector 
.className{

}

Id Selector
#id{

}

Decendant Selectors
parentTag childTag{

}

Grouping Selectors
h1,h2,h3{

}

Combining Selectors (The is used to select element with multiple classes)
.box.btn{ // Header with class btn

}
Psedo Selectors
-link
-active
-hover
-visited
-focus

a:visited{

}

Selectors Specificity
	Order 
	
	-Universal (*)
	-Type (p)
	-Class (.example)
	-Id (#example)
	!Important - Overrides all the specifications.

==========================================================================================================================================

CSS Box Model
=============

Displaying Elements:
	Elements can be displayed as:
		Inline (Add nexts to each other and the display properties like height and width don't have effect)
		Block (Comes in new line. Display properties have effect)
		Inline-block (Gets added next to next and also have effect on Display properties)

Box Model Properties
	Coming from the middle:
	-Content
		-Width
		-Height
	-Padding
	-Border
	-Margin

============================================================================================================================================

Typography
==========
Script - For story content
Decorative - Used for decorations (Headings, etc.,)
Monospace - Commonly used for coding
Serif - Most commonly used in web
Sans-serif - Most commonly used and modern

CSS used for fonts
===================
https://www.cssfontstack.com/
Google Fonts
Adobe Fonts

font-family  
	Generic fonts: serif, sans-serif, cursive, fantacy, monospace
	Web popular fonts: Times New Roman, Arial
	
font-weight 
	Used to increase the thickness.
	100 being thinnest and 900 being thickest
	normal, bold can also be used
	noraml - 400 
	bold - 700
	Relative types like, lighter and bolder can also be used. It changes to 400 or 700 depending upon the current value.

@font-face{  // Add downloaded fonts to the project
	font-family : "My-Font";
	src: url(relative/absoluteURL);
	
}
Properties of font:
-------------------
font-style
font-size
font-weight
font-family
font-varient
line-height
text-decoration
text-align


Shorthand  - font: italic small-caps bold 24px/1.5 Arial,'Times New Roman';
Longhand -
font-style : italic; 
font-varient: small-caps;
font-weight: bold;
font-size : 24px;
line-height: 1.5;
font-family: Arial, 'Times New Roman';

Properties of Text Decoration:
------------------------------
Longhand:
text-decoration-line: underline;
text-decoration-color: red;
text-decoration-style: solid;
text-decoration-thickness: 
Shorthand: text-decoration : underline red solid;

================================================================================================================================================
Floats (Need to be visited again)
======

float:
overflow: auto/hidden

box-sizing: // The size of the box/element remains as defined, eventhough padding/margin/border is added.

Elements Positioning: (position attribute)
=====================

static
relative - moves the element from the current position to the desired postion from the given postion.
absolute - It keeps reference from the parent element. (And it is relative to the nearest positioned container)
fixed - The element keeps the same position in the page, no matter how the page is scrolled.
sticky - similar to fixed, but can specify a range when the element should get fixed.

z-axis stacking:
----------------
Order:
	-body
	-blockItems
	-inlineItems
	-positionedItems
	-z-index specified items

The items that are below are displayed first. 
And the order of display is followed by the order defined in html.

z-index  - this can be used to display positioned items the way we want in the stack.

==============================================================================================================================================

Flexbox and Grid layouts: (To be revisited)
-------------------------
Flexbox :
	-Used for one dimention flow of elements
	
	Flexbox container: The main element
	Flexbox elements: The sub-elements inside the flexbox container
	Flexbox-direction(main-axis) : (default) horizontal (Can be changed to vertical also)
		flex-direction:	row || column || row-revese || column-reverse
		flex-wrap: nowrap || wrap || wrap-reverse || 
	
	// FollowingCan be applied only to the flex-element and not the flex-container;
		Short hand:
		flex : grow shrink basis;
		flex: 1 1 100px
		Longhand 
		flex-grow: 1 
		flex-shrink: 1 
		flex-basis: 100px;
	
	align-items 
	justify-content
	
Grid : 
	-Used for 2-dimention flow of elements
	
	Grid Tracks
	Gutter
	Explicit Grid
	Implicit Grid
	Grid row
	Grid Column
	
==============================================================================================================================================
	
Advanced Selectors:
===================

Child Combinator (>)
	Gets added to only the child element and not any nested element within the child element. (Note : In decendent selector, the nested elements will also be affected)
	
Sibiling Combinators( + , ~ )
	Adjacent Sibiling Combinator (+)
		The child element directly next to the parent element
	General Sibiling Combinator (~)
		The child elements the comes after the parent element will get affected. 

Pseudo Selectors
	:first-child
	:last-child
	:first-of-type
	:last-of-type

==============================================================================================================================================

Responsive Web Design:
----------------------

Fluid Layout
Fluid Image 
Media Quries
	@media
	Types:
		-All
		-Print 
		-Speech
		-Screen
		
