Introduction to JavaScript
==========================
JavaScript or Vanilla JavaScript is the core JavaScript language on which other languages are built.

	JSX - A syntax extention of JavaScript created for React JavaScript framework

	Different JavaScript Frameworks
	===============================
	Vanilla Script - Core JavaScript language
	ECMAScript -  
	ES2015
	CoffeeScript
	TypeScript
	ES6
	JSX
	React 
	Vue 
	Angular 
	Node.js
	Babel
	WebPack
	Gulp
	
Loading Script file in a HTML
-----------------------------
	differ - JS gets downloaded parallely and gets executed at the last.
	async - JS gets downloaded and gets executed 
	
	type = module 
	JS modules can be expoted and imported and used according to the need. (This improves code reuseablilty and acheives modularity.)
	
Accessing Objects
-----------------
	Dot Notation
	
	Bracket Notation
	
Class
----
In JavaScript class can be created via two methods.
	- Object Constructor (Old method)
		This is the old way to create templates and use them as Objects util Class was introduced.
		This does not have the features that Class offers.
	- Class keyword (Most used)
		Class supports OOPs Concepts

Global Objects (Predefined - > Documentation available at MDN Web Docs)
--------------


Template Literals (Used to inject data into HTML from JavaScript)
-----------------
`` ->  Backtick symbol with ${} is used to inject data into HTML via JS

=====================================================================================================================================================
DOM (Document Object Model)
============================
document -> returns the current document 

Elements: Accessing Elements
-------------------------------
	document.querySelector("cssElement"); -> Returns the particular element.
	document.querySelectorAll("cssElement"); -> Returns a list of elements.
	document.getElementsByClassName("className"); -> Returns the elements with the particular class name.
	document.getElementById("className"); -> Returns the element ith the particular id.
	document.getElementByTagName("tagName") -> Returns the elements with the particular tag.
	
Elements: Modifing Element's Classes and ID 
--------------------------------------
When you want to modify a particular element's class name, you can use the following method.

Element.className(); -> Returns a single className for a element
	document.querySelector -> to get the element
	document.querySelector("element").className = "newClassName";

	This will change the current element class name to the new class name.
	Commenly used to close the window, or give some response for a button click, etc,.

Element.classList(); -> Returns a list of Class names for the element 
	classList.add("className") -> to add the class to the particular element
	classList.remove("");
	classList.contains("className") -> Return boolean
	classList.toggle(""); -> Used to add or remove class. If the class is present, it gets removed. If the class is not present, it gets added.
	classList.replace("classToBeReplaced", "replacementClass"); -> Used
	
Adding Content to the element:
------------------------------
Element.innerText
Element.innerHTML
Element.textContent


Attributes: (Id,Class, etc,.)
------------------------
Element.attributes -> Returns a nodeMap of attributes
element.getAttribute("attributeName") -> Returns the particular attribute
element.setAttribute("attributeName", "attributeContent")
element.removeAttribute("attributeName")

Style:
------
element.style -> Gives the style of the particular element
element.style.color = 'red' -> to apply style

Creating DOM Elements
---------------------
element.innerHTML = templateLiteralQuotedContent; -> This adds the templateLiteralQuotedContent into the current element (It will replace the current content)

Document.createElement()

ParentNode.append();
ParentNode.prepend();
Node.appendChild();

==============================================================================================================================================
JavaScript Objects
------------------
	var
	- Scope : Global (Even when declared inside a block)
	
	let
	- Scope : Block-level (Only limited to the current block)
	
	const 
	- Scope : Block-level (Only limited to the current block)
	  It cannot be assigned again once defined.

DataTypes
---------
	typeof(variable) -> Returns the data type of the variable.

Operators
---------

= 		- Assignment 
== 		- Comparison (Compares only value)
===		- Absolute Comparison (Compares value and the type of the value)
>
>=
<
<=
!= 
!== 	- Absolutly not equal
--------------------------------------------------
+
-
/
%
*
**		-Exponensation 2**3 => Return (2*2*2) = 8;
--------------------------------------------------
++
--

=====================================================================================================================================================

Arrays (Refer MDN for more functions)
======
push() 		-> Add elements at last
pop()  		-> Remove last element
peek()
join() 		-> Joins the array into a string (A delimiter is also optional)
unshift() 	-> Add elements at first
shift() 	-> Remove first element
find() 		

======================================================================================================================================================
Functions and Methods
=====================

	
A default value can be given to the function inputs: So that, they don't process null value and return exception/error.

Function Declaration
--------------------	
	function add(a,b){
		return a+b;
	}
	
Function Expression (We use annonimous function here)
-------------------
	const multiply = function(a,b){ return a * b; };

Immediatly Invoked Function Expression
--------------------------------------

	(
		function(){
			let a = 5;
			let b = 6;
			console.log(a+b);
		}
	)();

	This function is executed immediatly when it is encountered.

Arrow Functions (We use annonimous function here)
---------------

const divide = (a,b) => return a/b; 

======================================================================================================================================================

Use of this keyword in functions

	A function within a Object ( Inside that function, this points to the current object)
	A arrow function doesn't know the this variable. So, it points to the nearest object.

	
======================================================================================================================================================

Callback Function
-----------------
Here in function parameter, along with the values, a function is also passed.
And that function can be used/called within the function.

Eg:
	const add = (a,b) => a+b;
	
	const calculator = function(num1, num2, operation){
		return operation(num1,num2);
	}
	
	console.log(calculator(1,3,add));
	
	This will return 4.
	
===========================================================================================================================================================

For Loop

	1. Traditional For Loop
	2. For of Loop
	3. forEach method
	4. For in Loop (For objects)
	
Functional methods

	forEach
	map
	
===========================================================================================================================================================

Event Handeling
---------------
Refer MDN -> Event Reference

Syntax:
	element.addEventListener("listenFor", callBackMethod, [optionalOptions]);
	
	body.addEventListener("mouseover", body => body.sytle.background = "red"; , false);


===========================================================================================================================================================
	
Constructor Function and Factory Functions to create Objects:
-------------------------------------------------------------

Construction Function
---------------------

	function Person(name){
		this.name = name;
		function walk(){
			console.log('Walk');
		}
	}
	
	const person1 = new Person('Siva');
	
Factory Function
---------------------

	function createPerson(name){
		return {
			name,
			walk: function(){
			console.log('Walk');
			}
		};
	}

	const person2 = createPerson('Siva');

===========================================================================================================================================================

ES6 Features

Let and Const 
Destructuring {} , []	-> Object destructuring and Array destructuring
Spread Operator  ... 	-> Can be used on objects and arrays as well
Arrow Function => 		-> Used to define annonimous functions
Array functions -> map, filter
For of 			-> Iterate over Iterable collections [Arrays, Strings, Maps, NodeLists, and more]
Map object 	-> new Map(); -> Enables to store key value pair.
Set object  -> new Set(); -> Enables to avoid storing duplicate values.
Class 		-> Template for JS objects
Promises


