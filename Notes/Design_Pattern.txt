Design Pattern - Introduced by Gang of Four



Common architectural apporach

Principles (Should be revised)
==========
Single Responsibility Principle 
Open-Close Principle
Lisvoc Substitution Principle
Interface Segregation Principle
Dependancy Inversion Principle


1)Creational
	-Deals with creation of objects
	-Has Explicite and Implicite 
	-Has single line creation and step-by-step creation of object 
	
		-Builder
			Example (StringBuilder) -> CodeBuilder tool(MasterCraft)
			Build an object by the user using related functions
		-Factory
			Returns an object based upon the values passed as requested by the user.
				-Abstract Factory
				-Factory Method
		-Prototype
			All about coping an object. 
			(Shallow copy, Deep copy and cloning an object)
			Prototype pattern is acheived by 
				Deepcopy( with the help of copy constructor)
				Cloneing( with implementing clonable interface to the class and overriding clone() method of tht object class)	
				Serialization and Deserialization of an object( with using SerilizationUtil.roundtrip(ObjectToBeCopiedOrCloned) )
		-Singleton
			Only one instance is created for that class and used.
			It is achecived by:
				Making the constructor private
				Creating a private static final instance within the class
				Creating public getter for the instance.
			Problems faced because of using Singleton Pattern:
				When serializing the object the Singleton property is broken and a new copy of the instance is created
					To overcome this issue:
						To add protected Object readResolve(){
						return the instance of the singleton;
						}
						
			TYPES OF ACHEIVING SINGLETON:
			-Basic Singleton
			-Static Block Singleton
			-Lazy Initialization Singleton and Thread safety
			-Inner Static Class Singleton	
			-Enum based Singleton (It's not serializable)
			-Monostate (All the variables are made static.)
			-Multiton (Restrict the number of Instance that is to be created)
			-Singleton With Dependancy Injection
			
2)Structural 
	-Deals with the structure of the class (class members)
	
		-Adapter
			Getting the interface you want from the interface you have
			As the name suggests, this pattern uses the existing implementation with the help of a adapter class.
			
		-Bridge
			Connecting components together through abstraction
			A mechanism that decouples an interface(hierarchy) from an implementation (hierarchy)
			
		-Composite
		-Decorator
		-Facade
		-Flyweight 
		-Proxy
		
3) Behavioural
	-Chain of responsibility
	-Command
	-Intrepreter
	-Iterator
	-Mediator
	-Memento
	-Null Object
	-Observer
	-State
		Ablity to use different objects in place of one.
		Ablity to add additional features to the program without affect the current functionality. (Open closed principle)
		Acheived by using Polymorphisam
	-Startegy
	-Template Method
	-Visitor
	
Creational Design Pattern
=========================
-Factory Method Pattern
define an interface or abstract class for creating an object but let the subclasses decide which class to instantiate

-Abstract Factory Pattern
define an interface or abstract class for creating families of related (or dependent) objects but without specifying their concrete sub-classes

-Builder Pattern 
construct a complex object from simple objects using step-by-step approach

-Singleton Pattern
define a class that has only one instance and provides a global point of access to it

-Prototype Pattern
cloning of an existing object instead of creating new one and can also be customized as per the requirement.

 


