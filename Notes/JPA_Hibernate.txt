Java Persistence API
====================

JPA is a java specification for accessing, persisting and managing data between Java object and a relational database.

JPA provides guidelines for a framework so that that can be implemented and become JPA compatible.

Hibernate is one of the JPA provider
There are lot of JPA provider.

If you follow JPA you can switch to any of the JPA providers without code change.

Hibernate
=========
	It is a framework that simplifies data access from the DB
	Data is represented in Java objects
	It is a ORM (Object Relational Mapping) tool

	Mapping can be done by xml config or annotation config
	hibernate.cfg.xml


Why not tradtional JDBC ?

	Too many sql codes for a simple operation
	Db dependent
	Manually handeled associations of tables

Why ORM? 
	Allows to use Java objects as a representation of Relational DB
	Mapping is done between POJO's and DB
	Configured through XML and JPA Annotations 
	Hides SQL and JDBC complex codes and queries and is handeled by the ORM framework


Hibernate

Session is used to connect to the Database (JDBC Connection)
Configuration -> SessionFactory -> Session 
	
Pesistant Class

-Just a POJO with getters and setters for the fields inside the class


APIs used in Hibernate

Configuration
ServiceRegistry
SessionFactory
Session
Transaction

Basic Annotations
@Entity 	-> To specify that it is a entity
@Id 		-> To specify the primary key for the table
@Embedded 	-> To specify that it is a embedded class (That it will be included in the parent class table)
@Embeddable	-> To specify that the class is open to embedding (Sort of permission)
@EmbeddedId -> This specifies the composite primary key.
@Table 		-> To specify the field as table
@Column		-> Mention it as a column
@JoinColumn -> Join column to a existing table from an other table  
@JoinColumns 
@MapsId 	-> Maps one key from one table to another. Used to add forign keys to a table.

@Enumurated(EnumType.STRING) ->In order to add Enumurated type of data into the column. 
If EnumType attribute is not specified, Then it will show the position of data associated with the enum.
@AttributeOverride -> Overrides the default name when embedding the class with it.


Storing a collection into a database:
@ElementCollection
@CollectionTable

@Cacheable
@Cache
@OrderBy


Reationl Mapping Annotations
@OneToOne 
@OneToMany
@ManyToOne
@ManyToMany



Fetching type (For relations)
==============
Lazy - When mentioning the sub entity the query is fired
		Default type
Eager- Query is fired for the subentity even when the base entity is called.
		(Add attribute fetch= FetchType.EAGER)

Hibernate Cache
===============
When the application request same data for multiple times from the database,
The database is hit each time and the data is fetched
This is a time consuming process, and hibernate cache helps in solving the problem
Hibernate cache is a buffer memory present in the application server where previously processed query data are present.


	-First level cache
		-It is provided by default with hibernate.
		-It is session specific.
		-Each session will have a first level cache.
		-The data is fetched from the PersistenceContext(First level cache). Even if the data is modified in the database by someother user,
		 the data that is present in the firstLevelCache is only fetched.
		-If you want to force fetch the data from the database, regarless of the date present in the PersistenceContext,
		 use refresh() method of EntityManger.
		-If you want to clear an object from the PersistenceContext you can use the detach() method.
		-If you want to fully clear the PersistenceContext you can use the clear() method.
		
	-Second level cache
		-When you want to have a common cache for the whole application independent of the session, Second level cache is used.
		-It is not provided by default, it has to be configured.
		-Like log4j, it's dependencies has to be downloaded/configured via maven.
		-Configue in hibernate.cfg.xml that second level cache is used.
		-Mention the entities as @Cachable or @Cache
		
	Query with second level cache.
		-Configure hibernate.cfg.xml that Query cache is used.
		-Create a query
		-Set query object to cacheable to true.
		-Execute query.

Hibernate Query Language (HQL)
==============================

SQL query can be used in HQL using native queries

Hibernate States
================
Transient
	By default all the objects are in transient state
Persistent
	Once you use save() or persist() method, the object goes into Pesistant state
	Any operation performed on the object will affect the database.
	When we use the merge() method the detached object joins Persistent state with the values in it.
Detached
	Once you use detach() method, the object is detached from the session and further operation performed on the object will not be reflected in the database.
Removed
	remove() method is used to remove the object from the database, but will still be in java as an object.
	
Get and Load methods for fetching data
=======================================

Get
		It fires the query even when the object is not used further.
		It returns an Null object when it couldn't find the data for the primary key specified.
Load
		It fires the query only when the object is used.
		It throws ObjectNotFound exception when it couldn't find the data for the primary key specified.
		
getReference() => This will only create a referece of a object (A proxy null object)
				  When trying to access the data, query is fired and data is fetched.
				 
		

Aggregation and Composition relationships
=========================================
Aggregation Relationship

	Aggregation indicates the relationship between a whole and a part
	A Band has an artist (Band is a whole and artist is a part)
	In Aggregation if the whole is destroyed the parts is not destroyed.
	Here part are shared and can be used with other whole (A artist can be a part of other band too)

Composition Relationship

	Composition is a strong aggregation
	When the whole is destroyed and the parts are also destroyed along with it.
	A House has a room (House is whole and room is a part)
	Here part is shared with it's whole only. It cannot be shared with other whole.
	The room can be a part of the particular house only.

Entity and Value types
======================
An object of Entity type has it's own database identity (Primary Key)

Value type objects are identified through the owning entity
The lifecycle of the value type object is bound to that of it's owning entity object

Component 
=========
A component is a part of a whole
Eg: A room in a house 
A component is shared only with it's whole, Once the whole is destroyed the component is also destroyed.



Hibernate Dependancies
======================

<dependencies>
		<dependency>
			<groupId>mysql</groupId>
			<artifactId>mysql-connector-java</artifactId>
			<version>8.0.28</version>
		</dependency>
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-core</artifactId>
			<version>5.4.32.Final</version>
		</dependency>
		<dependency>
			<groupId>org.apache.logging.log4j</groupId>
			<artifactId>log4j-core</artifactId>
			<version>2.17.1</version>
		</dependency>

	</dependencies>
	
	
JPA 
===

Classes involved
	EntityManagerFactory
	EntityManager

Dirty Check
===========
It occurs during commit process of the transaction.
If the retrived object is modified, it is identified by dirty check and persists the current state of the object.

In order to force dirty check and persist the object flush() of the EntityManager can be used.


JPQL Queries
 