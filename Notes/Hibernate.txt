It is a framework that simplifies data access from the DB
Data is represented in Java objects
It is a ORM (Object Relational Mapping) tool

Mapping can be done by xml config or annotation config
hibernate.cfg.xml


Why not tradtional JDBC ?

Too many sql codes for a simple operation
Db dependent
Manually handeled associations of tables

Why ORM? 
Allows to use Java objects as a representation of Relational DB
Mapping is done between POJO's and DB
Configured through XML and JPA Annotations 
Hides SQL and JDBC complex codes and queries and is handeled by the ORM framework


Hibernate

Session is used to connect to the Database (JDBC Connection)
Configuration -> SessionFactory -> Session 
	
Pesistant Class

-Just a POJO with getters and setters for the fields inside the class


APIs used in Hibernate

Configuration
ServiceRegistry
SessionFactory
Session
Transaction

Basic Annotations
@Entity
@Id
@Embedded
@Table
@Column

Reationl Mapping Annotations
@OneToOne
@OneToMany
@ManyToOne
@ManyToMany

Aggregation and Composition relationships
=========================================
Aggregation Relationship

	Aggregation indicates the relationship between a whole and a part
	A Band has an artist (Band is a whole and artist is a part)
	In Aggregation if the whole is destroyed the parts is not destroyed.
	Here part are shared and can be used with other whole (A artist can be a part of other band too)

Composition Relationship

	Composition is a strong aggregation
	When the whole is destroyed and the parts are also destroyed along with it.
	A House has a room (House is whole and room is a part)
	Here part is shared with it's whole only. It cannot be shared with other whole.
	The room can be a part of the particular house only.

Entity and Value types
======================
An object of Entity type has it's own database identity (Primary Key)

Value type objects are identified through the owning entity
The lifecycle of the value type object is bound to that of it's owning entity object



